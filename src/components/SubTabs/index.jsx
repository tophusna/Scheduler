import { useSelector } from "react-redux";
import SubTab from "./Sub";
import { getActiveSubTabs } from "../../redux/topTabsSlice/selectors/getActiveSubTabs";

const SubTabs = () => {
  const subTabs = useSelector(getActiveSubTabs)
  if (subTabs.length !== 0)
    return (
      <>
        <div className="tabs">
          {subTabs.map((tab) => (
            <SubTab {...tab} />
          ))}
        </div>
      </>
    );

    return <></>
};
/*
Redux - это библиотека для управления состоянием приложения в JavaScript-приложениях. Она часто используется в связке с библиотеками и фреймворками, такими как React, Angular, и Vue, для упрощения управления данными и состоянием приложения. Вот некоторые ключевые термины и понятия, связанные с Redux:

Store (Хранилище): Это центральное хранилище данных приложения. 
Внутри него хранятся все данные и состояние приложения. 
Оно является единственным источником правды для состояния приложения.

Action (Действие): Это объект, который описывает, что произошло в приложении. 
Он содержит тип действия (строку) и, иногда, дополнительные данные (payload)
 о событии.

Reducer (Редьюсер): Это функция, которая принимает текущее состояние 
и действие, и возвращает новое состояние приложения. Редьюсеры должны быть 
чистыми функциями, которые не изменяют исходное состояние.

Dispatch (Отправка): Это метод, используемый для отправки действий в хранилище. 
Когда действие отправляется, Redux передает его в редьюсеры для обновления состояния.

Action Creator (Генератор действий): Это функция, которая создает и возвращает 
объект действия. Она обычно используется для упрощения создания действий с
 определенным типом.

Middleware (Промежуточное ПО): Это механизм расширения функциональности Redux. 
Промежуточное ПО позволяет перехватывать и обрабатывать действия перед тем, как они попадут в редьюсеры. Это может использоваться, например, для логирования, асинхронных запросов или других побочных эффектов.

Selector (Селектор): Это функция, которая позволяет выбирать определенные части состояния из хранилища. Они помогают избежать избыточных перерисовок компонентов и упрощают доступ к данным.

Immutable State (Неизменяемое состояние): Принцип, который утверждает, что состояние приложения не должно изменяться напрямую. Вместо этого, редьюсеры должны возвращать новые объекты состояния при каждом изменении.

Provider: Компонент, предоставляемый библиотекой React Redux, который обеспечивает доступ к хранилищу Redux из компонентов React.

Connect (Соединение): Функция, предоставляемая React Redux, которая позволяет связать компонент React с состоянием Redux и действиями через контейнерный компонент.

Thunk: Middleware для Redux, который позволяет обрабатывать асинхронные действия, такие как запросы к серверу, внутри действий.

DevTools: Инструменты разработчика для браузера, которые позволяют отслеживать и отладить изменения состояния и действия Redux в реальном времени.

Action Type (Тип действия): Это строка, которая определяет тип действия. Она обычно хранится как константа и используется для сравнения типов действий в редьюсерах и генераторах действий.

State Tree (Дерево состояния): Это структура данных, представляющая собой иерархию всех данных и состояния в приложении, хранящуюся в хранилище Redux.

Эти термины и понятия являются основными элементами архитектуры Redux и используются для организации и управления состоянием в приложении.
*/
export default SubTabs;

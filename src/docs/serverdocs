neophyte711, [30.10.2023 12:36]
** Поотрабатывал еще одну конфу : 
1) Создать новую сущность на основе шаблона.
2) Возможность изменить сам шаблон и его название во второй вкладке.
3) Все сущности и группы - это JS скрипты, их запускают JS шедулеры. Можно указать источник шаблона, изменить JS шедулер и создать новый тип шаблона JS шедулеров.
4) Редактирование JS шедулеров и соответствующих скриптов.
5) JS шедулеры создаются на React с использованием setTimeout и setInterval. Скрипты меняют только путь к одному из сохраненных шаблонов JS шедулера.
6) Создание новой сущности на основе выбранного шаблона с указанием пути в JS скрипт, управляющий определенным шедулером.
7) Определение прав доступа для создания и изменения JS шедулеров.
8) Автоматическое создание редактируемого JS скрипта для управления шедулером.
9) Определение операционной системы для управления шедулерами с помощью JS.
10) Указание, какие данные в конкретных JS скриптах можно изменять и откуда их брать.
11) Организация структуры папок и файлов для хранения шаблонных текстовых файлов и JS скриптов шедулера.

neophyte711, [30.10.2023 12:37]
Метод add_entity (Создание объекта):

Метод HTTP-запроса: POST
Параметры:
name (обязательный) - имя объекта
key (обязательный) - ключ подписчика
params (обязательный, хотя бы один параметр)
parentGuid (необязательный)
comment (необязательный)
Описание: Создание нового объекта.
Пример успешного ответа:
json

{
  "success": true,
  "status_code": 200,
  "message": "OK. Everything worked as expected.",
  "data": {
    "message": "Объект успешно добавлен!",
    "entityGuid": "02671531-8707-4013-8fac-1fb3a95bb0c7"
  }
}
Пример неуспешного ответа (например, если имя объекта пустое):
json

{
  "success": false,
  "status_code": 400,
  "message": "Bad request.",
  "data": {
    "message": "Имя объекта (name) не может быть пустым."
  }
}
Метод set_entity_params (Изменение параметров объекта):

Метод HTTP-запроса: POST
Параметры:
entityGuid (обязательный) - GUID объекта
key (обязательный) - ключ подписчика
params (обязательный, хотя бы один параметр)
Описание: Изменение параметров объекта.
Пример успешного ответа:
json

{
  "success": true,
  "status_code": 200,
  "message": "OK. Everything worked as expected.",
  "data": {
    "message": "Изменения сохранены!",
    "entityId": 53
  }
}
Пример неуспешного ответа (например, если не указан идентификатор объекта):
json

{
  "success": false,
  "status_code": 400,
  "message": "Bad request.",
  "data": {
    "message": "ИД объекта (entityId) не может быть пустым."
  }
}
Метод get_entities (Получение структуры объекта):

Метод HTTP-запроса: POST
Параметры:
key (обязательный) - ключ подписчика
Описание: Получение структуры объекта.
Пример успешного ответа:
json

{
  "success": true,
  "status_code": 200,
  "message": "OK. Everything worked as expected.",
  "data": {
    "message": [
      {
        "entityGuid": "66d95c21-42c4-4491-80b7-e6c6c396144a",
        "name": "child_20230515_4",
        "description": "adding entity from python",
        "childrens": false,
        "params": true
      },
      {
        "entityGuid": "677dd6ac-1079-4822-872a-d1019ea7b8c1",
        "name": "child_20230515_5",
        "description": "adding entity from python",
        "childrens": false,
        "params": false
      }
    ],
    "total": 2
  }
}
Пример неуспешного ответа (например, если ключ подписчика не указан):
json

{
  "success": false,
  "status_code": 400,
  "message": "Bad request.",
  "data": {
    "message": "Ключ подписчика (key) не может быть пустым."
  }
}
Метод get_entity (Получение данных по объекту):

Метод HTTP-запроса: POST
Параметры:
key (обязательный) - ключ подписчика
entityGuid (обязательный) - GUID объекта
Описание: Получение данных по объекту.
Пример успешного ответа:
json

{
  "success": true,
  "status_code": 200,
  "message": "OK. Everything worked as expected.",
  "data": {
    "message": [
      {
        "id": 37,
        "entityId": 24,
        "entityGuid": "1c1a4af6-e6ac-4f7b-986e-37be0bc100ab",
        "name": "param_parent",
        "comment": "test param one",
        "val": null,
        "updateSubscriberId": 1,
        "active": 1,
        "paramId": 0,
        "createdAt": "2023-05-15T10:19:29.000Z",
        "updatedAt": "2023-05-15T10:19:29.000Z"
      }
    ]
  }
}
Пример неуспешного ответа (например, если ключ подписчика не указан):
json

{
  "success": false,
  "status_code": 400,
  "message": "Bad request.",
  "data": {
    "message": "Ключ подписчика (key) не может быть пустым."
  }
}
Метод change_entity (Изменение структуры объекта):

Метод HTTP-запроса: POST
Параметры:
key (обязательный) - ключ подписчика
entityGuid (необязательный) - GUID объекта
name (необязательный) - имя объекта
comment (необязательный) - описание объекта
parentGuid (необязательный) - GUID объекта родителя
params (необязательный)
Описание: Изменение структуры объекта.
Пример успешного ответа:
json

{
  "success": true,
  "status_code": 200,
  "message": "OK. Everything worked as expected.",
  "data": {
    "message": "Изменения сохранены!",
    "entityGuid": "69717433-160d-4e59-9476-62e8bc0913c4"
  }
}
Пример неуспешного ответа (например, если не указан ключ подписчика):
json

neophyte711, [30.10.2023 12:37]
{
  "success": false,
  "status_code": 400,
  "message": "Bad request.",
  "data": {
    "message": "Ключ подписчика (key) не может быть пустым."
  }
}
Метод get_alarms (Получение сообщений о недоступности точек):

Метод HTTP-запроса: POST
Параметры:
key (обязательный) - ключ подписчика
Описание: Получение сообщений о недоступности точек.
Пример успешного ответа:
json

{
  "success": true,
  "status_code": 200,
  "message": "OK. Everything worked as expected.",
  "data": {
    "message": [
      {
        "id": 1,
        "subscriberId": 1,
        "createdAt": "2022-10-04T22:43:53.000Z",
        "updatedAt": "2022-10-04T22:43:53.000Z"
      },
      // ... другие сообщения
    ]
  }
}
Пример неуспешного ответа (например, если ключ подписчика не указан):
json

{
  "success": false,
  "status_code": 400,
  "message": "Bad request.",
  "data": {
    "message": "Ключ подписчика (key) не может быть пустым."
  }
}
Метод subscribers_ping (Пинг подписчиков):

Метод HTTP-запроса: POST
Параметры:
key (обязательный) - ключ подписчика
entityGuid (обязательный) - GUID объекта
Описание: Пинг подписчиков.
Пример успешного ответа:
json

{
  "success": true,
  "status_code": 200,
  "message": "OK. Everything worked as expected.",
  "data": {
    "message": "Статус подписчиков обновлён!"
  }
}
Пример неуспешного ответа (например, если не указан идентификатор объекта):
json

{
  "success": false,
  "status_code": 400,
  "message": "Bad request.",
  "data": {
    "message": "Ид объекта (entityId) не может быть пустым."
  }
}
Метод subscribe (Сокетный метод):

Параметры:
key (обязательный) - ключ подписчика
entities (обязательный) - массив из GUID объектов
method (обязательный) - наименование метода
params (необязательный) - массив имен объектов
children (обязательный, только для метода subscribe) - флаг передачи детей объектов
change (необязательный) - флаг отправки по изменениям
interval (необязательный) - интервал отправки данных в секундах (по умолчанию 60 сек)
Пример успешного ответа: В этом случае, ответы являются асинхронными и будут передаваться через сокет в вашем коде.

Ваши запросы и ответы должны быть адаптированы для взаимодействия с сервером и клиентом с использованием WebSocket.


add_entity (Добавить объект)

   Метод: POST
   Параметры:
   name (обязательно) - Название объекта, который нужно создать.
   key (обязательно) - Ключ подписчика.
   params (обязательно) - Словарь параметров объекта.
   parentGuid (необязательно) - GUID родительского объекта.
   comment (необязательно) - Описание объекта.
   Ответы:
   Успешно: Объект создан с GUID и сообщением об успешном выполнении.
   Ошибка: Разные сообщения об ошибке в зависимости от проблемы.
   set_entity_params (Установить параметры объекта)

Метод: POST
   Параметры:
   entityGuid (обязательно) - GUID объекта, параметры которого нужно установить.
   key (обязательно) - Ключ подписчика.
   params (обязательно) - Словарь параметров для установки.
   Ответы:
   Успешно: Параметры обновлены с сообщением об успешном выполнении.
   Ошибка: Разные сообщения об ошибке в зависимости от проблемы.
   get_entities (Получить объекты)

Метод: POST
   Параметры:
   key (обязательно) - Ключ подписчика.
   parentGuid (необязательно) - GUID родительского объекта.
   Другие необязательные параметры для ограничения, смещения и поиска.
   Ответы:
   Успешно: Список объектов, соответствующих заданным критериям.
   Ошибка: Разные сообщения об ошибке в зависимости от проблемы.
   get_entity (Получить данные объекта)

Метод: POST
   Параметры:
   key (обязательно) - Ключ подписчика.
   entityGuid (обязательно) - GUID объекта для получения данных.
   Ответы:
   Успешно: Детали указанного объекта.
   Ошибка: Разные сообщения об ошибке в зависимости от проблемы.
   change_entity (Изменить объект)

neophyte711, [30.10.2023 12:37]
Метод: POST
   Параметры:
   key (обязательно) - Ключ подписчика.
   entityGuid (необязательно) - GUID объекта для изменения.
   Другие необязательные параметры, такие как name, comment, parentGuid, params.
   Ответы:
   Успешно: Изменения сохранены с сообщением об успешном выполнении.
   Ошибка: Разные сообщения об ошибке в зависимости от проблемы.
   get_alarms (Получить сообщения об ошибке)

Метод: POST
   Параметры:
   key (обязательно) - Ключ подписчика.
   Другие необязательные параметры, такие как limit, offset.
   Ответы:
   Успешно: Список сообщений об ошибке.
   Ошибка: Разные сообщения об ошибке в зависимости от проблемы.
   subscribers_ping (Проверить статус подписчиков)

Метод: POST
   Параметры:
   key (обязательно) - Ключ подписчика.
   entityGuid (обязательно) - GUID объекта для проверки.
   Ответы:
   Успешно: Состояние подписчиков обновлено.
   Ошибка: Разные сообщения об ошибке в зависимости от проблемы.
   subscribe (Подписаться на данные)

Метод: Соксет (WebSocket)
   Параметры:
   key (обязательно) - Ключ подписчика.
   entities (обязательно) - Массив GUID объектов для подписки.
   method (обязательно) - Название метода.
   Другие необязательные параметры, такие как params, children, change, interval.
   Ответы:
   Успешно: Данные сообщений, полученные в результате подписки.
   Ошибка: Разные сообщения об ошибке в зависимости от проблемы.
   Эти методы представляют собой API для управления объектами и взаимодействия с подписчиками в некоторой системе. Если у вас есть конкретные вопросы или требуется дополнительная информация по какому-либо из этих методов, не стесняйтесь задавать вопросы.

{
  "data": {
    "message": [{
      "entityGuid": "66d95c21-42c4-4491-80b7-e6c6c396144a",
      "entityId": 25,
      "paramId": 38,
      "paramName": "param_one",
      "val": 5633.14,
      "updatedAt": "2023-05-15T10:21:55.000Z"
    }, {
      "entityGuid": "66d95c21-42c4-4491-80b7-e6c6c396144a",
      "entityId": 25,
      "paramId": 39,
      "paramName": "param_two",
      "val": null,
      "updatedAt": "2023-05-15T10:20:05.000Z"
    }, {
      "entityGuid": "66d95c21-42c4-4491-80b7-e6c6c396144a",
      "entityId": 25,
      "paramId": 40,
      "paramName": "param_three",
      "val": 5633.14,
      "updatedAt": "2023-05-15T10:21:55.000Z"
    }]
  },
  "status_code": 200
}

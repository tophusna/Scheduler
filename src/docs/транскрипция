1. 10.10.20.11 сервер.
2. На этой площадке хаб развёрнут
4. node.js скрипт там должен находиться на сервере. И быть запущенным. с Виктором отработать.
5. Зашёл также 10.10.20.11 шедулер ide, в вэбе в браузере. Открылся дальше я делаю создать проект.
9. Создать он мне предлагает: выбрать папку, в которой этот проект запишу. 
** Хоть на компе, хоть на сервере?
10. Либо создать новую папку. Cтандартная схема.
12. Нажимая окей, и проект создаётся.
13. Записывается, если необходимо, соответствующий файл далее, то есть я создаю хаб.
14. Внутри менеджера подписок добавляю хаб, 
    - делаю настройки хаба, 
    - сохраняю. 
    - e меня соответствующие значения.
15. Для данного хаба я создаю одну или 2 группы подписок.
16. В этой подписке ууказываю, выбираю, соответствующей сущности.
18. Сохраняя это все файлы, смотрю, как оно у меня сохранилось.
    - После этого мы двигаемся дальше., к определённому моменту придёт понимание общей структуры. 
    - Поэтому идем маленькими шагами.
21. Одним клиентом:подключаться не надо, получить getentities из этой один запрос разовым коннектом.
22. Идет коннект запросы возвращения entities.
23. POST
24. Данные обратно прилетают.
25. Там нет подписки, нет постоянно выделенного соединения.

=============

Внутри группы еще одной группы быть не может

1. Создать проект:
   - Это означает, что нужно создать новый проект или рабочую область для работы.

2. Сохранить проект (локально / на сервере):
   - Позволить сохранять проект на вашем компьютере или на удаленном сервере, чтобы вы могли возвращаться к нему позже.

3. Открыть проект (локально / на сервере):
   - Дать возможность открывать ранее созданный проект как на вашем компьютере, так и на удаленном сервере.

4. Иметь возможность изменить конфигурацию (нужно добавить сабтаб группы):
   - Добавить функциональность для настройки параметров проекта.
   - Если интервал установлен в ноль, то изменения параметров должны происходить автоматически только при их изменении.
   - Разрешить создание вложенных групп параметров.
   - Если выбрана опция history, система должна сохранять и показывать историю всех изменений, которые произошли в течение секунды.

5. Зайти из браузера по ссылке https://10.10.20.11/scheduler:
   - Предоставить возможность входа в систему через веб-браузер, перейдя по указанной ссылке.

6. Проект сохраняется в формате JSON, который можно открыть онлайн в codeEditor:
   - Проекты должны быть сохранены в формате JSON, что позволит их открывать и редактировать онлайн в специальном редакторе кода.

=============

1.  Подтверждает эти данные, отправляя как бы это? Ну, параметры в сущность внутри сущности ещё есть параметры.
2.  Это пойти прямо единственной.
4.  То есть, если что-то поменялось? Соответствующее значение параметра летит ченьж стоит крестик.
5.  Если ничего не менялось, если ничего не менялось, значит, все параметры с интервалом в одну секунду, значит, всё равно летят значение.
6.  Здесь может быть ноль, тогда только поезд по изменению что-то происходит.
7.  Ну столько по изменению, то есть если тут в интервале ноль, значит, если не меняются никаких сообщений не не идёт на подписчика, ну не идёт никак сообщений на подпись.
8.  Хистори в этом случае здесь мы делаем вот так.
9.  Здесь мы делаем вот так.
10.  То есть, если мы выбираем хистори, значит, ченьж обнуляется и становится недоступным.
11.  И тогда значит, вот эта конфигурация означает, что идёт массив всех изменений, которые произошли за секунду.
12.  И каждую секунду все изменения летят.
13.  По параметрам.
14.  То есть, если параметры изменился за секунду 5 раз приведёт 5 значений в массиве.
15.  Если ни одного раза, значит никаких значений в массиве не придёт.
16.  Ну или последнее значение будет?
17.  Которая там зафиксировалась лучше лучше последнее значение там.
18.  Ну раз секунду он будет излучения отправлять, то есть либо последнее значение, которое у него есть, либо все изменения, которые там были в течение этих этого интервала.
19.  Соответственно, значит случаи изменения параметра. Никакого сообщения не идёт, а это же на группу на всю группу Распространяется по всем сущностям, поэтому и групп несколько может быт.
20.  Потому что вот эти.
21.  Вот эта конфигурация, она в зависимости от задачи она разная. Может быть, для таких то сущностей такая, то конфигурация для таких, кто такая конфигурация.
22.  Ну не надо мне до этих сущностей историю читать. Последнее значение там раз в минуту получаю и слава тебе, Господи, что канал не забивай.
23.  Это не нам с вами решать.
24.  Это будет решать тот, кто будет делать прикладную часть под эту платформу. 
25.  Всё вот он настроил подписку. Вот группа эта подписка, по сути дела.
26.  Это конкретная подписка на конкретные сущности с конкретной конфигурацией.
27.  Соответствии с теми акты, которые значит, нас расписаны все, а подписка она включается когда.
28.  Это если мы вдруг здесь захотим посмотреть, где то параметры захотим посмотреть.
29.  Значение параметра.
30.  Ну тогда мы включаем подписку и смотрим, какие значения параметров на хабе есть.
31.  А фактически нам нужна только в рандоме.
32.  Когда уже scheduler будут работать в протеине не в идее, не в идее.
33.  Ну когда вот это сейчас я доеду это конфигурирование конфигурируется долю.
34.  Он же он запускается, он запускается в работу и идёт подписка на те сущности, которые мы определили для подписки, для подписки и зависимости от выбранной конфигурации, запускаются в работу скрипты.
35.  То есть методы внутри скриптов.
36.  Метод значение, допустим или раз в секунду вот идёт какое то выполнение. Вот он раз в секунду какие то значения считал определённые определённые методы выполнили ну определённый метод выполнился.
37.  Или данные куда то записал


Внутри цикла while происходит выполнение скрипта. Шедлель запускается, и он ожидает завершения выполнения скрипта.

Как только скрипт завершается, он завершает выполнение. Иными словами, скрипты выполняются независимо друг от друга.

Если внесены изменения в скрипт, он должен быть перезапущен отдельно.

Интегратор обрабатывает изменения в скрипте и записывает их.

Возможно, происходит запись данных по факту завершения скрипта.

Скрипты могут быть написаны интеграторами.

Параметры могут быть связаны с процессами и обработаны в соответствии с изменениями.

Интеграторы знают, как обрабатывать данные процессов.

Подписки могут быть настроены на значения параметров.

Производится обработка изменений параметров внутри процедур.

Значения параметров могут фиксироваться на момент вызова скрипта.

Возможно, значения параметров могут быть записаны на момент завершения скрипта.

В некоторых случаях происходит напрямую обращение к хабу.

Наличие подписок может влиять на доступность параметров в памяти.

Раскрипта зависит от наличия подписок на параметры.

Если этого параметра нет, то обрабатываем соответствующую ситуацию.

Рассматриваем статическое или рантайм значение параметра.

Если это статик, то параметры уже имеются в памяти, так как они были получены по подписке.

Запрашиваем данные, если это необходимо.

Вызываем функцию скрипта с определенными данными.

Выполняется скрипт как функция в контексте выполнения.

Обработка изменений параметра в процессе выполнения функции.

Значение параметра отправляется на хаб по завершении скрипта.

Рассматриваем ситуацию с рантаймом и изменениями параметра.

Обращаемся к хабу для получения данных или записи данных, в зависимости от нужд.

Важно учитывать, что первый скрипт может выполняться быстрее, так как данные уже могут быть в памяти.

При обновлении данных в хабе они могут быть доступны в режиме реального времени.

Если скрипт выполняется в цикле или долгое время, могут возникнуть различные сценарии и учет изменений параметров.

Зависимо от подписки и контекста, данные могут поступать в антайме.

Важно учесть, что скрипт может быть заряжен на параметры, и их обращение к хабу может происходить по мере необходимости.

Он должен сохранять ее. Бутри группы не может быть. Это однозначно.

Друпов привязано к хабов. В группе есть сущность. Все. И сущность выбрали право относительно подписки.

Надо выложить видео импрючейсо и сделать сохранение в файл. Потом пойдем дальше.

Мы создаем франеек. Он должен создать франеек. Но сегодня с вами это время. Пока это будет конфигурация подписка. Это все состояние.

Я уже могу познакомиться с файлом. Для меня, как для пользователя, которые пользуются для платформы, не состояние преодолго.

Можно сохранить весь проект. Если это не будет открытым другим файлом, то должен сохраняться. Должна быть где-то кнопочка сохранения всего проекта. Не импортекс порта, а сохранить. Не импортекс порта, пока не кроме.

Новый проект создается под него соответствующая папка. Если мы говорим про серию, то он называется "Паркот". То есть, как он файла Джейсоновского. Нас много будет в полниверсможе.

Если это будет один Джейсоновский файл, то в котором будет просто перечень. У нас Джейсонов в файл сподсфисками хорошо. А где у нас будет настройки? Я воскритый.

Когда он должен сработать? Это скрипт. У него есть свои настройки. Это не здесь. Это не подписка. Но мы подписались на 50 оключностей. Конкретный скрипт.

Я хочу вам вернуться. Коль ты понимаешь, что он допустим, подписались на предварительное. Я понимаю, что вы подписались на конечное количество. А потом мы же в рамках сущности настроили определенную конфигурацию. Верное, я понимаю. То, что мы сейчас проговаривали, это подписок. Это подписка всего лишь. Это те данные, которые идут шедулировых оба. Дальше они обрабатываются с криптами.

Но если мы подписались на 50 оключностей по изменениям, мы же не будем 50 подписок делать под каждую сущность отдельная подписка. У меня для двух сущностей один скрипт, для трех сущностей и другой скрипт. Мы подписали этот скрипт, он подписку делается. А потом в скрипты берем те сущности, которые до данного скрипта нужно. А это уже в другом месте. Это получается настройки. Это тоже с Джессом Пайлудовым скрипт. То есть настройка скрипта, настройка скрипта связка с данными. В принципе, исполнение этого скрипта. А дальше уже в Джессе это не посредственно касается скрипта.

И здесь тоже как мы можем быть несколько вариантов. Мы можем в Джесс Пайле поместить и связать в Джессоне скрипт с этим Джесс Пайлом. А можем в этом же Джессоне скрипт разместить. Видите там ассерция и просто тупо текст. Я почему гришь это дальше как бы мы пойдем. Ну давайте закончим начали с подписками. Но вот тут рвознулись и не двигаемся. Вот эту часть делаем, потом постепенно пойдем дальше.

Катя, я спокойно. - Да, сюда летаться. Мы сейчас вообще ничего пить не сделаем. Ну хорошо, ну так надо задать шедуверью.

Вот я вот мою дверью пока мы не смотрим это уйдя. Мы понимаем о приоре. У нас в проекте Эдное количество Пайла. В том числе Пайла в Джессона и возможно спойду с Джесс. Возможно только Эднепайла в Джессоне. Потому что Джесс будет смотреть Джессона. Но их Эднайка личиста. И тогда соот

ветственно значит мы либо делаем еще один Джессон файл, который мы вот общей. Но тогда в этом файле мы перечисляем тупо сущности. Вот просто тупо идет перечисление всех Джессонских файлов проектов. То что это в проекте содержим.

Хорошо. Но это механизм тоже тогда Рада. Минутовую скрипку, какой он, работает с файлами.

То есть, вот у нас есть площадка. Здесь есть 10, 20, 11.

Внутри цикла while запускается скрипт. Шедлель запустился, завис на крипте и сразу же был запущен.

Все скрипты завершаются. То есть, когда скрипт завершает выполнение, он может быть перезапущен, если необходимо.

Если требуется внести изменения в скрипт, то можно внести правки, сохранить и перезапустить скрипт отдельно.

Если изменения не требуются, то скрипт может быть удален из проекта.

В случае необходимости сохранить работоспособный скрипт без изменений, он может быть сохранен отдельно.

Необходимо обеспечить возможность работы с данными, находящимися на хабе.

Для работы с данными на хабе можно использовать готовый класс, который будет переносить данные и выполнять необходимые операции.

Не нужно создавать и уничтожать экземпляры класса каждый раз; они могут быть использованы повторно.

Скрипты пишут интеграторы, которые знают, как обрабатывать данные и процессы.

Интеграторы описывают процесс обработки данных и определяют, куда записывать результаты.

Интеграторы могут также следить за изменениями параметров и реагировать на них.

Задача интеграторов - описывать процессы и обеспечивать правильное взаимодействие между различными процессами.

Интеграторы должны учитывать симметричные взаимосвязи между процессами, если они имеются.

Эта часть скрипта вызывается, когда скрипт отработал и все выполнено.

Значения могут быть записаны в случае, если они являются результатом работы скрипта.

В некоторых случаях может возникнуть необходимость передать данные.

По умолчанию все данные передаются реально, если это не указано иначе.

Данные могут иметь разные типы.

В зависимости от типа данных могут выполняться разные операции.

В некоторых случаях значения фиксируются на момент вызова и не зависят от текущих значений.

В других случаях запись происходит по факту завершения скрипта.

Все изменения и результаты обработки данных должны быть отмечены и записаны.

В момент завершения скрипта, если это не статик, идет обращение к хабу.

Важно учитывать подписку на значения, на которые выполняется обращение.

Разные скрипты могут быть подписаны на разные значения и сущности.

Важно учитывать внутреннюю обработку и скорость выполнения процедур.

Изменения параметров могут повлиять на дальнейшее выполнение скрипта или других процессов.

Если на параметр идет подписка, он уже находится в памяти и не требует запроса к хабу на момент запуска процедуры.

Раскриптовка происходит при вызове функции.

Если параметра нет в памяти, он запрашивается у хаба.

Статическое значение может быть взято напрямую.

Запросы к хабу происходят только в тех случаях, когда параметры не доступны локально.

Скрипт вызывает функцию в нашем контексте.

Функция вызывается с определенными данными и контрактом.

Процесс выполнения функции начинает методы.

Изменения значения параметра отражаются на момент выхода из скрипта и отправляются на хаб.

В случае рантайма данные могут быть разные.

Изменения параметра отправляются на хаб.

Некоторые параметры не изменяются и не требуют запроса.

Данные значения хранятся в памяти.

Правильные хабы обрабатывают и хранят значения.

После обработки значения сложатся.

Если на параметр подписка, он уже находится в памяти и не требует запроса к хабу.

На момент запуска процедуры параметры уже доступны.

В случае статических значений нет необходимости в запросе.

Значения параметров могут быть взяты напрямую, так как они уже доступны в памяти.

Параметры, которые по подписке уже прилетели, не требуют дополнительных запросов.

Некоторые параметры запрашиваются только при необходимости.

После запроса параметров и вызова функции начинается выполнение методов.

Процесс выполнения функции может изменить значения параметров.

На момент выхода из скрипта значения параметров отправляются на хаб.

В случае рантайма данные могут иметь разные значения и требовать запросов к хабу.

Изменения в параметрах отражаются на момент выхода из скрипта и отправляются на хаб.

Все изменения и значения параметров хранятся и обрабатываются правильными хабами.

После обработки значения сложатся в соответствии с логикой системы.

Но если необходимо обратиться к определенному значению параметра, происходит запрос к хабу.

Если обращение к параметру требуется для получения данных, происходит запрос к хабу.

Если обращение к параметру требуется для записи данных, изменения сразу же отражаются на хабе.

Процесс выполнения скрипта может менять значения параметров.

По окончании выполнения скрипта все изменения в параметрах записываются.

Нет постоянного обращения к шине и ожидания данных от хаба.

В процессе выполнения скрипта может быть много обращений к хабу.

Длительное выполнение скрипта может привести к увеличению числа обращений к хабу.

Зависимо от подписки, параметры могут приходить в антаймово.

Настройки скрипта могут определять, когда параметры будут запрашиваться с хаба.

Скрипт может быть настроен на запрос параметров с хаба при каждом обращении к ним.

Параметры могут быть получены с хаба только тогда, когда они действительно нужны скрипту.

Все это зависит от логики и конфигурации скрипта и системы в целом.


### 1. Создание новой сущности на основе шаблона:

   - Реализуйте интерфейс для создания новой сущности на основе предварительно созданного шаблона.
   - Обеспечьте возможность изменения самого шаблона и его названия во второй вкладке.

### 2. Возможность изменить шаблон и его название во второй вкладке:

   - Разработайте вторую вкладку в вашем интерфейсе, предоставляющую пользователю возможность изменения шаблона и его названия.
   - Реализуйте соответствующую логику сохранения внесенных изменений.

### 3. Все сущности и группы - это JS скрипты, их запускают JS шедулеры:

   - Создайте систему, где сущности и группы представлены в виде JS скриптов.
   - Реализуйте JS шедулеры, которые будут отвечать за запуск этих скриптов.

### 4. Редактирование JS шедулеров и соответствующих скриптов:

   - Разработайте интерфейс для редактирования JS шедулеров и связанных с ними скриптов.
   - Обеспечьте возможность изменения параметров и логики скриптов.

### 5. JS шедулеры создаются на React с использованием `setTimeout` и `setInterval`:

   - Реализуйте JS шедулеры, используя библиотеку React и функции `setTimeout` и `setInterval` для управления временными интервалами.

### 6. Создание новой сущности на основе выбранного шаблона с указанием пути в JS скрипт:

   - Добавьте функционал для создания новой сущности, выбрав шаблон, и указав путь к соответствующему JS скрипту.

### 7. Определение прав доступа для создания и изменения JS шедулеров:

   - Разработайте систему управления правами доступа, чтобы ограничивать создание и изменение JS шедулеров только определенными пользователями.

### 8. Автоматическое создание редактируемого JS скрипта для управления шедулером:

   - Реализуйте функционал автоматического создания редактируемого JS скрипта для управления каждым шедулером.

### 9. Определение операционной системы для управления шедулерами с помощью JS:

   - Укажите операционные системы, которые будут поддерживать управление шедулерами с использованием JS.

### 10. Указание, какие данные в конкретных JS скриптах можно изменять и откуда их брать:

   - Определите, какие данные в JS скриптах могут быть изменены, и укажите их источники.

### 11. Организация структуры папок и файлов для хранения шаблонных текстовых файлов и JS скриптов шедулера:

   - Разработайте структуру файловой системы для хранения шаблонных текстовых файлов и JS скриптов шедулеров.

### 12. Взаимодействие с хабом через WebSocket:

   - Установите WebSocket соединение с хабом на сервере с IP-адресом 10.10.20.11 для обмена данными между клиентом и сервером.

### 13. Система подтверждения изменений данных:

   - Реализуйте механизм подтверждения изменений данных, отправляя их в формате JSON через WebSocket.

### 14. Интеграция с системой управления подписками и группами:

   - Включите в интерфейс функционал управления подписками и группами для отслеживания изменений в сущностях.

### 15. Обновление данных через отдельные запросы:

   - Учтите, что система обновляет данные через отдельные запросы, а не постоянное соединение.

### 16. Минимизация отправки данных при отсутствии изменений:

   - Разработайте логику, которая минимизирует отправку данных, если ничего не изменилось.

### 17. Подписка на конкретные сущности и активация подписок по запросу пользователя:

   - Реализуйте механизм подписки на конкретные сущности и их конфигурации, активируемый по запросу пользователя.

### 18. Определение использования истории изменений:

   - Разработайте систему, где решение об использовании истории изменений зависит от конечных пользователей.
